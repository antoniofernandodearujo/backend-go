basePath: /api/v1
definitions:
  controllers.Message:
    properties:
      message:
        type: string
    type: object
  services.Album:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  services.AlbumPayload:
    properties:
      description:
        type: string
      title:
        type: string
    type: object
  services.AlbumsList:
    properties:
      albums:
        items:
          $ref: '#/definitions/services.Album'
        type: array
    type: object
  services.Post:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  services.PostPayload:
    properties:
      content:
        type: string
      user_id:
        type: string
    type: object
  services.PostsList:
    properties:
      posts:
        items:
          $ref: '#/definitions/services.Post'
        type: array
    type: object
  services.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  services.UserAlbum:
    properties:
      added_at:
        type: string
      album_id:
        type: string
      user_id:
        type: string
    type: object
  services.UserAlbumPayload:
    properties:
      album_id:
        type: string
      user_id:
        type: string
    type: object
  services.UserPayload:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  services.UsersList:
    properties:
      users:
        items:
          $ref: '#/definitions/services.User'
        type: array
    type: object
info:
  contact: {}
  description: This is the API for the Sensedia Challenge
  title: Sensedia Challenge API
  version: "1"
paths:
  /albums:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all album entries
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.AlbumsList'
      summary: Get all albums
      tags:
      - albums
    post:
      consumes:
      - application/json
      description: Creates a new album entry
      parameters:
      - description: Album Data
        in: body
        name: albumData
        required: true
        schema:
          $ref: '#/definitions/services.AlbumPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/services.Album'
      summary: Create an album
      tags:
      - albums
  /albums/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an album entry identified by ID
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Message'
      summary: Delete an album
      tags:
      - albums
    get:
      consumes:
      - application/json
      description: Retrieves a specific album by its ID
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.Album'
      summary: Get album by ID
      tags:
      - albums
    put:
      consumes:
      - application/json
      description: Updates an existing album identified by ID
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: string
      - description: Album Data
        in: body
        name: albumData
        required: true
        schema:
          $ref: '#/definitions/services.AlbumPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.Album'
      summary: Update an album
      tags:
      - albums
  /albums/save:
    post:
      consumes:
      - application/json
      description: Associates an album with a user
      parameters:
      - description: User Album Data
        in: body
        name: userAlbumData
        required: true
        schema:
          $ref: '#/definitions/services.UserAlbumPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/services.UserAlbum'
      summary: Add album to user
      tags:
      - albums
  /posts:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.PostsList'
      summary: Get all posts
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a post entry identified by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Message'
      summary: Delete a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Retrieves a specific post by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.Post'
      summary: Get post by ID
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Updates an existing post identified by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Post Data
        in: body
        name: postData
        required: true
        schema:
          $ref: '#/definitions/services.PostPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.Post'
      summary: Update a post
      tags:
      - posts
  /posts/create:
    post:
      consumes:
      - application/json
      description: Creates a new post
      parameters:
      - description: Post Data
        in: body
        name: postData
        required: true
        schema:
          $ref: '#/definitions/services.PostPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/services.Post'
      summary: Create a post
      tags:
      - posts
  /users:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.UsersList'
      summary: Get all users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user identified by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Message'
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieves a specific user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.User'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates an existing user identified by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Data
        in: body
        name: userData
        required: true
        schema:
          $ref: '#/definitions/services.UserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.User'
      summary: Update a user
      tags:
      - users
  /users/{id}/albums:
    get:
      consumes:
      - application/json
      description: Retrieves a list of albums associated with a user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.AlbumsList'
      summary: Get albums by user ID
      tags:
      - albums
  /users/{id}/albums/{album_id}:
    delete:
      consumes:
      - application/json
      description: Removes an album association from a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Album ID
        in: path
        name: album_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Message'
      summary: Remove album from user
      tags:
      - albums
  /users/{id}/posts:
    get:
      consumes:
      - application/json
      description: Retrieves a list of posts associated with a user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.PostsList'
      summary: Get posts by user ID
      tags:
      - posts
  /users/create:
    post:
      consumes:
      - application/json
      description: Creates a new user
      parameters:
      - description: User Data
        in: body
        name: userData
        required: true
        schema:
          $ref: '#/definitions/services.UserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/services.User'
      summary: Create a user
      tags:
      - users
swagger: "2.0"
